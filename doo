#!/bin/bash -u
set -o pipefail

help() {
echo 'Usage: doo COMMAND [arg...]

A docker assistant to build, ship and run containers.

The image NAME is built, tagged and pushed using the name of the current directory and the env var DOCKER_REPO.

dev and go run containers by using all *.env files found in the current directy in --env-file arguments and
all directories that appears in the COPY Dockerfile directives with --volume.

Commands:
  b, build        docker build $DOCKER_REPO/$NAME
  t, tag          docker tag   $DOCKER_REPO/$NAME:VERSION (VERSION: sha1 if git repo and/or latest)
  p, push         docker push  $DOCKER_REPO/$NAME

  bgo, buildgo    build go binary in docker (docker run -v $PWD:/go/src/<package> golang:1.8.0 go build)

  u, up                        docker compose up -d by using the first .yml found in the current directory
  dc [COMPOSE_FILE] ARGS...    docker compose ARGS  by using the first .yml found in the current directory or
                               a given compose file

  d, dev          docker run -ti $DOCKER_REPO/$NAME by loading env-files and mounting current directories
  g, go  IMAGE    docker run $IMAGE                 by loading env-files and mounting current directories
'
}

GO_VERSION=1.8.0

set_sha1() {
  GIT_SHA1=${GIT_SHA1:-"no"}
  if [[ "$GIT_SHA1" == "no" ]]; then
    if [[ $(git rev-parse 2> /dev/null; echo $?) == "0" ]]; then
      GIT_SHA1=$(git rev-parse --short HEAD)
    else
      GIT_SHA1="latest"
    fi
  fi
  export GIT_SHA1=$GIT_SHA1
}

env_files() {
  local arg=""
  while read env_file; do
    arg="$arg --env-file=$(readlink -f $env_file)"
  done < <(find . -name "*.env" -type f)
  echo "$arg"
}

mounted_volumes() {
  local arg=""
  while read copy_line; do
    src=$(pwd)/$(cut -d ' ' -f2 <<< $copy_line)
    dst=$(cut -d ' ' -f3 <<< $copy_line)
    arg="$arg -v $src:$dst"
  done < <(grep COPY Dockerfile)
  echo "$arg"
}

set_docker_repo() {
  [ -f .docker.env ] && export $(cat .docker.env | xargs)
  DOCKER_REPO=${DOCKER_REPO:-"krkr"}
  [[ $DOCKER_REPO == "" ]] && echo "err: DOCKER_REPO not set" && return 1
}

doo_cmd() {
  declare name=$NAME
  declare cmd=$1
  shift

  declare long_cmd="" node=${DOCKER_MACHINE_NAME:-$(hostname)}

  case $cmd in
    b|build)
      if [ "$EUID" -ne 0 ]; then
        sudo chown -R $USER:$USER .
      fi
      set_docker_repo
      long_cmd="docker build --rm --label commit=$GIT_SHA1 -t $DOCKER_REPO/$name ."
    ;;
    bgo|buildgo)
      set_docker_repo
      local commit=${1:-"$GIT_SHA1"} && shift
      local go_project_path=$(pwd | sed "s|.*/go/src/||")
      declare build_env="-e GOBIN=/go/bin/ -e CGO_ENABLED=0 -e GOPATH=/go"
      declare image="golang:$GO_VERSION"
      declare build_date=$(date "+%Y-%m-%dT%H:%M:%S")
      long_cmd="docker run --rm --hostname $node -v $(pwd):/go/src/$go_project_path -w /go/src/$go_project_path $build_env $image go build -ldflags \"-X main.gitCommit=${commit} -X main.buildDate=$build_date\""
    ;;
    d|dev)
      set_docker_repo
      long_cmd="docker run --rm -ti $(env_files) $(mounted_volumes) $@ $DOCKER_REPO/$name"
    ;;
    g|go)
      set_docker_repo
      local opts=""
      if [[ "$1" =~ ^- ]]; then
        opts="$1 $2" && shift && shift
      fi
      local go_name=${1:-""} && shift
      [[ $go_name && "" ]] && echo "err: NAME not set" && return 1
      declare workdir=$name
      long_cmd="docker run --rm -ti --hostname $node $(env_files) -v $(pwd):/$name -w /$workdir $opts $DOCKER_REPO/$go_name $@"
    ;;
    dc)
      local compose_file=$1 && shift
      declare compose_project=$(basename $compose_file | sed "s/.yml//")

      long_cmd="docker-compose -f $compose_file -p $compose_project $@"
    ;;
    u|up)
      declare compose_file=$(find . -maxdepth 1 -name "*.yml")
      long_cmd="docker-compose -f $compose_file up -d"
    ;;
    t|tag)
      if [[ "$GIT_SHA1" != "latest" ]]; then
        echo "docker tag $DOCKER_REPO/$name $DOCKER_REPO/$name:$GIT_SHA1"
      fi
    ;;
    p|push)
      set_docker_repo
      long_cmd="docker push $DOCKER_REPO/$name"
    ;;
    pt|pushtag)
      set_docker_repo
      long_cmd="docker push $DOCKER_REPO/$name:$GIT_SHA1"
    ;;
    *)
      echo "doo: '$cmd' is not a dooo command."
      echo "See 'doo help'."
      exit 1
    ;;
  esac

  echo "$long_cmd"
}

main() {
  local cmd=${1:-""} && shift || true

  set_sha1

  QUIET=${QUIET:-"no"}
  if [[ "$cmd" == "-q" ]]; then
    QUIET="yes" cmd=${1:-""} && shift
  fi

  JSON=${JSON:-"no"}
  if [[ "$cmd" == "-j" ]]; then
    JSON="yes" cmd=${1:-""} && shift
  fi

  declare log="false"
  case $cmd in
    b|build|dc|u|up|t|tag|p|pt|push)
      log="true"
      kind="$(get_kind $cmd)"
      ;;
    bgo|buildgo)
      local commit=${1:-"$GIT_SHA1"}
      declare image="golang:$GO_VERSION"
      declare build_date=$(date "+%Y-%m-%dT%H:%M:%S")
      echo "[$image] go build -ldflags \"-X main.gitCommit=${commit} -X main.buildDate=$build_date\""
      log="true"
      kind="build"
      ;;
    d|dev|g|go)
      ;;
    bu)
      doo b
      doo u
      exit $?
    ;;
    bp)
      doo b
      doo p
      exit $?
    ;;
    btp)
      doo b
      doo t
      doo pt
      exit $?
    ;;
    w|watch)
      rm -f ~/.doo/*.doo
      while true; do
        clear;
        echo "[$(date +%Y%m%d-%Hh%Mm%S)] > doo watch..."
        find ~/.doo -type f -name "*.doo" | xargs -n1 head -1 \
          | tail -6 | sort -r \
          | jq -c '{date:.timestamp,status:.status,action:.cmd,cmd:.long_cmd,msg:.title}'
        sleep 1
      done
      ;;
    ""|h|help)
      help
      exit 0 ;;
    *)
      echo "doo: '$cmd' is not a doo command."
      echo "See 'doo help'."
      exit 1 ;;
  esac

  # Use the current directory as the docker image name
  NAME=$(basename $(pwd))

  # Try to get name from DOCKER_NAME env var defined in .docker.env
  if [[ -f .docker.env ]]; then
    n=$(grep DOCKER_NAME .docker.env | sed "s/DOCKER_NAME=//")
    if [[ "$n" != "" ]]; then
      NAME=$n
    fi
  fi

  # Get the command to execute
  declare long_cmd="$(doo_cmd $cmd "$@")"

  # Execute the command without posting result

  if [[ $log == "false" ]]; then
    if [[ ${DOO_DEBUG:-0} == "1" ]]; then
      echo "$long_cmd"
    fi
    eval $long_cmd
    exit $?
  fi

  # Execute the command by posting result

  mkdir -p ~/.doo
  declare logfile=~/.doo/$(date +%s.$cmd.$(date +%N)$RANDOM.doo)

  declare start=$(date +%s)
  declare node=${DOCKER_MACHINE_NAME:-$(hostname)}
  declare status=pending

  declare bold="\e[1m"
  declare reset_bold="\e[0m"
  declare cyan="\e[36m"
  declare green="\e[32m"
  declare purple="\e[35m"
  declare red="\e[31m"
  declare reset="\e[39m"
  declare color=$cyan

  # Execute the command and pipe the stdin/stderr in a file
  eval $long_cmd 2>&1 | tee -a $logfile
  declare status_code=$?

  # Hm, docker-compose can return 0 and have ERROR :-/
  if [[ $(grep -ic error $logfile) -gt 0 ]]; then
    status_code=1
  fi

  # Set colors depending the status
  case $status_code in
    0 ) status=OK;    color=green color1=$cyan; color2=$green; htmlColor=#03A9F4; htmlColor2=#4CAF50 ;;
    * ) status=ERROR; color=red color1=$purple; color2=$red  ; htmlColor=#9C27B0; htmlColor2=#F44336 ;;
  esac

  declare lastline="$(tail -1 $logfile | strings)"
  declare duration=$(($(date +%s) - $start))

  get_output() {
    tail -n +2 $logfile | grep -v "Sending" | base64 -w0
  }

  htmlSummary() {
    echo '<a class=\"ui '$color' tiny horizontal label\">' \
      $status'</a> '$kind' '$NAME '<a href>'$GIT_SHA1'</a>'
  }

  jsonEvent() {
    declare output=${1:-""}
    [[ "$output" == "withOutput" ]] && output=',"Output":"'$(get_output)'"'
    echo '{
      "Timestamp":"'$(date +%s)'",
      "Kind":"'$kind'",
      "Service":"'$NAME'",
      "Node":"'$node'",
      "Status":"'$status'",
      "Name":"'$kind' '$NAME' '$GIT_SHA1'",
      "Html":"'$(htmlSummary)'",
      "Sha1":"'$GIT_SHA1'",
      "Cmd":"'$(sed "s/\"/'/g" <<< $long_cmd)'",
      "DurationSec":"'$duration'",
      "LastLine":"'$lastline'"
      '$output'
    }'
  }

  jsonify() { jsonEvent | jq -c .; }

  sed -i "1s|.*|$(jsonify)|" $logfile

  if [[ "$JSON" == "yes" ]]; then
    jsonify
  fi

  if [[ "$QUIET" != "yes" ]]; then
    echo -e "$color2$bold$status$reset_bold$reset: $cyan$long_cmd$reset"
  fi

  sendToElastic() {
    if [[ "${EVENTS_API:-}" != "" ]]; then
      declare sha1=$(jsonEvent withOutput | sha1sum | cut -c1-12)
      post_status=$(curl -s --connect-timeout 2 -XPOST "$EVENTS_API/$sha1" -d "$(jsonEvent withOutput)" -o /dev/null -w "%{http_code}")
      if [[ "$post_status" != "200" && "$post_status" != "201" && "$QUIET" != "yes" ]]; then
        echo -e "$red${bold}KO$reset_bold$reset: ${cyan}Event API POST failed: status=$post_status$reset"
      fi
    fi
  }

  sendToKafka() {
    if [[ "${B:-}" != "" ]]; then
      jsonEvent withOutput | jq -cM . | oq &
    fi
  }

  sendToElastic
  sendToKafka

  exit $status_code
}

get_kind() {
  declare cmd=$1
  case $cmd in
    b|build)   echo "build" ;;
    dc|u|up)   echo "deploy" ;;
    t|tag)     echo "tag"   ;;
    p|pt|push) echo "push"  ;;
  esac
}


main "$@"